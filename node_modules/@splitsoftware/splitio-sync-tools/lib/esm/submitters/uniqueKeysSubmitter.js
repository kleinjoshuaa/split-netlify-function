import { __awaiter } from "tslib";
import { fromUniqueKeysCollector } from '@splitsoftware/splitio-commons/esm/storages/inMemory/UniqueKeysCacheInMemory';
import { _Set } from '@splitsoftware/splitio-commons/esm/utils/lang/sets';
import { submitterFactory } from './submitter';
export function uniqueKeysSubmitterFactory(logger, postClient, uniqueKeysCache, maxRetries, uniqueKeysFetchSize) {
    function getPayload() {
        return __awaiter(this, void 0, void 0, function* () {
            const uniqueKeyItems = yield uniqueKeysCache.popNRaw(uniqueKeysFetchSize);
            if (!uniqueKeyItems.length)
                return undefined;
            const mergedUniqueKeys = uniqueKeyItems.reduce((accUniqueKeys, uniqueKeyItem) => {
                const featureNameKeys = accUniqueKeys[uniqueKeyItem.f];
                if (featureNameKeys) {
                    uniqueKeyItem.ks.forEach(key => featureNameKeys.add(key));
                }
                else {
                    accUniqueKeys[uniqueKeyItem.f] = new _Set(uniqueKeyItem.ks);
                }
                return accUniqueKeys;
            }, {});
            return fromUniqueKeysCollector(mergedUniqueKeys);
        });
    }
    return submitterFactory(logger, postClient, getPayload, 'unique keys', maxRetries);
}
