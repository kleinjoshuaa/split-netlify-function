import { segmentChangesFetcherFactory } from '@splitsoftware/splitio-commons/esm/sync/polling/fetchers/segmentChangesFetcher';
import { segmentChangesUpdaterFactory } from '@splitsoftware/splitio-commons/esm/sync/polling/updaters/segmentChangesUpdater';
/**
 * Class that manages the synchronization of segments.
 */
export class SegmentsSynchronizer {
    /**
     * @param {IFetchSegmentChanges}  segmentsFetcher  The SegmentChanges fetcher from Split API.
     * @param {ISettings}             settings         The Synchronizer's settings.
     * @param {ISegmentsCacheAsync}   segmentsStorage  The reference to the current Storage.
     */
    constructor(segmentsFetcher, settings, segmentsStorage) {
        this._segmentsStorage = segmentsStorage;
        this._settings = settings;
        this._fetcher = segmentChangesFetcherFactory(segmentsFetcher);
    }
    /**
     * Function to use the SegmentUpdater, in order to fetch and store segments from the BE.
     *
     * @returns {Promise<any>}
     */
    getSegmentsChanges() {
        this._segmentsUpdater = segmentChangesUpdaterFactory(this._settings.log, this._fetcher, this._segmentsStorage);
        return this._segmentsUpdater();
    }
}
