import { FLAG_SPEC_VERSION } from '@splitsoftware/splitio-commons/esm/utils/constants';
import { isIntegerNumber } from '@splitsoftware/splitio-commons/esm/utils/lang';
import { settingsValidation } from '@splitsoftware/splitio-commons/esm/utils/settingsValidation/index';
import { validateLogger } from '@splitsoftware/splitio-commons/esm/utils/settingsValidation/logger/builtinLogger';
import { defaults } from './defaults';
const FLAG_SPEC_VERSIONS = ['1.0', FLAG_SPEC_VERSION];
/**
 * Object with some default values to instantiate the application and fullfil internal
 * requirements.
 */
const params = {
    logger: validateLogger,
    defaults,
    consent: () => undefined,
    runtime: () => { return { ip: false, hostname: false }; },
    flagSpec: ({ sync: { flagSpecVersion }, log }) => {
        if (FLAG_SPEC_VERSIONS.indexOf(flagSpecVersion) > -1)
            return flagSpecVersion;
        log.error(`settings: you passed an invalid "flagSpecVersion" config param. It should be one of the following values: ${FLAG_SPEC_VERSIONS.map((version => `"${version}"`))}. Defaulting to "${FLAG_SPEC_VERSION}"`);
        return FLAG_SPEC_VERSION;
    },
};
function validatePositiveInteger(log, paramName, actualValue, defaultValue) {
    if (isIntegerNumber(actualValue) && actualValue > 0)
        return actualValue;
    log.warn(`'${paramName}' parameter must be a positive integer number. Using default value (${defaultValue}) instead.`);
    return defaultValue;
}
/**
 * Function to validate Synchronizer config.
 *
 * @param {any} config  Synchronizer config object provided by the user.
 * @returns {ISettings}
 */
export function synchronizerSettingsValidator(config) {
    // @ts-ignore
    const settings = settingsValidation(config, params);
    // @ts-ignore, override readonly prop
    settings.mode = undefined; // "producer" mode
    const { scheduler, log } = settings;
    // @TODO validate synchronizerMode eventually
    // @TODO: validate minimum and maximum value for config params.
    scheduler.eventsPerPost = validatePositiveInteger(log, 'eventsPerPost', scheduler.eventsPerPost, defaults.scheduler.eventsPerPost);
    scheduler.impressionsPerPost = validatePositiveInteger(log, 'impressionsPerPost', scheduler.impressionsPerPost, defaults.scheduler.impressionsPerPost);
    scheduler.maxRetries = validatePositiveInteger(log, 'maxRetries', scheduler.maxRetries, defaults.scheduler.maxRetries);
    return settings;
}
