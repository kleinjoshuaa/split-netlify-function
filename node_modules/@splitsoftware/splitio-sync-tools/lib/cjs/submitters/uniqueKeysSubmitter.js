"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniqueKeysSubmitterFactory = void 0;
const tslib_1 = require("tslib");
const UniqueKeysCacheInMemory_1 = require("@splitsoftware/splitio-commons/cjs/storages/inMemory/UniqueKeysCacheInMemory");
const sets_1 = require("@splitsoftware/splitio-commons/cjs/utils/lang/sets");
const submitter_1 = require("./submitter");
function uniqueKeysSubmitterFactory(logger, postClient, uniqueKeysCache, maxRetries, uniqueKeysFetchSize) {
    function getPayload() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const uniqueKeyItems = yield uniqueKeysCache.popNRaw(uniqueKeysFetchSize);
            if (!uniqueKeyItems.length)
                return undefined;
            const mergedUniqueKeys = uniqueKeyItems.reduce((accUniqueKeys, uniqueKeyItem) => {
                const featureNameKeys = accUniqueKeys[uniqueKeyItem.f];
                if (featureNameKeys) {
                    uniqueKeyItem.ks.forEach(key => featureNameKeys.add(key));
                }
                else {
                    accUniqueKeys[uniqueKeyItem.f] = new sets_1._Set(uniqueKeyItem.ks);
                }
                return accUniqueKeys;
            }, {});
            return (0, UniqueKeysCacheInMemory_1.fromUniqueKeysCollector)(mergedUniqueKeys);
        });
    }
    return (0, submitter_1.submitterFactory)(logger, postClient, getPayload, 'unique keys', maxRetries);
}
exports.uniqueKeysSubmitterFactory = uniqueKeysSubmitterFactory;
