"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.submitterFactory = exports.submitterWithMetadataFactory = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("./utils");
// Base submitter factory for impressions and events submitters, which must handle metadata
function submitterWithMetadataFactory(logger, postClient, sourceCache, dataName, itemsPerPost, fromCacheToPayload, maxRetries) {
    return function postData() {
        return sourceCache.popNWithMetadata(itemsPerPost).then((cacheData) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const data = fromCacheToPayload(cacheData);
            // POST data with retry attempts
            try {
                for (let i = 0; i < data.length; i++) {
                    const { payload, headers } = data[i];
                    yield (0, utils_1.retry)(() => postClient(JSON.stringify(payload), headers), maxRetries);
                }
                logger.info(`Successfully submitted ${dataName} to Split`);
            }
            catch (err) {
                logger.error(`An error occurred while submitting ${dataName} to Split: ${err}`);
                return false;
            }
            // If more data is available, post it.
            const count = yield sourceCache.count();
            return count > 0 ? postData() : true;
        }))
            .catch((e) => {
            logger.error(`An error occurred while retrieving ${dataName} from storage: ${e}`);
            return false;
        });
    };
}
exports.submitterWithMetadataFactory = submitterWithMetadataFactory;
// Base submitter factory for impression counts and unique keys submitters
function submitterFactory(logger, postClient, getPayload, dataName, maxRetries) {
    return function postData() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let payload;
            try {
                payload = yield getPayload();
            }
            catch (e) {
                logger.error(`An error occurred when retrieving ${dataName} from storage: ${e}`);
                return false;
            }
            if (payload) {
                // POST data with retry attempts
                try {
                    yield (0, utils_1.retry)(() => postClient(JSON.stringify(payload)), maxRetries);
                    logger.info(`Successfully submitted ${dataName} to Split.`);
                }
                catch (err) {
                    logger.error(`An error occurred while submitting ${dataName} to Split: ${err}`);
                    return false;
                }
            }
            return true;
        });
    };
}
exports.submitterFactory = submitterFactory;
