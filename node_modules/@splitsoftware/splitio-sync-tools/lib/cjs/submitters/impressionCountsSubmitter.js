"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.impressionCountsSubmitterFactory = void 0;
const tslib_1 = require("tslib");
const impressionCountsSubmitter_1 = require("@splitsoftware/splitio-commons/cjs/sync/submitters/impressionCountsSubmitter");
const submitter_1 = require("./submitter");
const maps_1 = require("@splitsoftware/splitio-commons/cjs/utils/lang/maps");
// Merge impressions counts objects
function merge(counts1, counts2) {
    const merged = new maps_1._Map(counts1.pf.map((count) => [count.f + count.m, count]));
    counts2.pf.forEach((count) => {
        const key = count.f + count.m;
        if (merged.has(key))
            merged.get(key).rc += count.rc;
        else
            merged.set(key, count);
    });
    const pf = [];
    merged.forEach((count) => pf.push(count));
    return { pf };
}
function impressionCountsSubmitterFactory(logger, postClient, impressionCountsCache, maxRetries, impressionCountsCacheInMemory) {
    function getPayload() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let result = yield impressionCountsCache.getImpressionsCount();
            // Get impression counts from the in-memory cache available when Synchronizer runs in OPTIMIZED impressions mode
            // and merge with the ones from pluggable storage.
            if (impressionCountsCacheInMemory) {
                const impressionCountsData = impressionCountsCacheInMemory.pop();
                const memoryCounts = Object.keys(impressionCountsData).length > 0 ?
                    (0, impressionCountsSubmitter_1.fromImpressionCountsCollector)(impressionCountsData) :
                    undefined;
                if (memoryCounts)
                    result = result ? merge(result, memoryCounts) : memoryCounts;
            }
            return result;
        });
    }
    return (0, submitter_1.submitterFactory)(logger, postClient, getPayload, 'impression counts', maxRetries);
}
exports.impressionCountsSubmitterFactory = impressionCountsSubmitterFactory;
