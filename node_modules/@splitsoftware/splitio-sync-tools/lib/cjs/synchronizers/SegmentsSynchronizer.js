"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentsSynchronizer = void 0;
const segmentChangesFetcher_1 = require("@splitsoftware/splitio-commons/cjs/sync/polling/fetchers/segmentChangesFetcher");
const segmentChangesUpdater_1 = require("@splitsoftware/splitio-commons/cjs/sync/polling/updaters/segmentChangesUpdater");
/**
 * Class that manages the synchronization of segments.
 */
class SegmentsSynchronizer {
    /**
     * @param {IFetchSegmentChanges}  segmentsFetcher  The SegmentChanges fetcher from Split API.
     * @param {ISettings}             settings         The Synchronizer's settings.
     * @param {ISegmentsCacheAsync}   segmentsStorage  The reference to the current Storage.
     */
    constructor(segmentsFetcher, settings, segmentsStorage) {
        this._segmentsStorage = segmentsStorage;
        this._settings = settings;
        this._fetcher = (0, segmentChangesFetcher_1.segmentChangesFetcherFactory)(segmentsFetcher);
    }
    /**
     * Function to use the SegmentUpdater, in order to fetch and store segments from the BE.
     *
     * @returns {Promise<any>}
     */
    getSegmentsChanges() {
        this._segmentsUpdater = (0, segmentChangesUpdater_1.segmentChangesUpdaterFactory)(this._settings.log, this._fetcher, this._segmentsStorage);
        return this._segmentsUpdater();
    }
}
exports.SegmentsSynchronizer = SegmentsSynchronizer;
